var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = Brokerage","category":"page"},{"location":"#Brokerage","page":"Home","title":"Brokerage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Brokerage.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Brokerage, Client]","category":"page"},{"location":"#Brokerage.Client.cancelQuote-NTuple{5, Any}","page":"Home","title":"Brokerage.Client.cancelQuote","text":"cancelQuote(ticker::Int, order_id::Int, order_side::String, limit_price::Float64,\n                acct_id::Int)\n\nCancel a limit order for a given asset. Intended for use by market makers; the method does not consolidate cash and share balances and is used to track market maker cancellation volume over time.\n\nArguments\n\nticker::Int: the assigned ticker ID of the asset being traded\norder_id::Int: the assigned ID of the order to be cancelled\norder_side::String: the side of the order, either \"BUYORDER\" or \"SELLORDER\"\nlimit_price::Float64: the limit price of the order to be cancelled\nacct_id::Int: the assigned ID of the account placing the order. This ID must be   registered as a market maker account (i.e., it must be a number less than or equal to   the value of the MM_COUNTER constant in the Mapper module).\n\n\n\n\n\n","category":"method"},{"location":"#Brokerage.Client.createPortfolio-Tuple{Any, Any, Any}","page":"Home","title":"Brokerage.Client.createPortfolio","text":"createPortfolio(name::String, cash::Float64, holdings::Dict{Int64, Int64}) -> Int64\n\nCreate a new portfolio with the given name, cash, and holdings.\n\nArguments\n\nname::String: the name of the new portfolio\ncash::Float64: the amount of cash in the new portfolio\nholdings::Dict{Int64, Int64}: the holdings of the new portfolio, mapping asset IDs to   the number of shares held. E.g., Dict(1 => 10, 2 => 12) means that the portfolio holds   10 shares of asset 1 and 12 shares of asset 2.\n\nReturns\n\nInt64: the ID of the newly created portfolio\n\n\n\n\n\n","category":"method"},{"location":"#Brokerage.Client.createSeveralPortfolios-NTuple{6, Any}","page":"Home","title":"Brokerage.Client.createSeveralPortfolios","text":"createSeveralPortfolios(num_users::Int64, name::String, min_cash::Float64,\n                        max_cash::Float64, min_holdings::Int64, max_holdings::Int64)\n\nEfficient method to create several portfolios. Individual portfolio cash balances and share holdings are randomly drawn using the given maximum and minimum bounds.\n\nArguments\n\nnum_users::Int64: the number of portfolios to be created\nname::String: the base name of the new portfolios\nmin_cash::Float64: the minimum amount of cash in each new portfolio\nmax_cash::Float64: the maximum amount of cash in each new portfolio\nmin_holdings::Int64: the minimum number of shares of each asset in each new portfolio\nmax_holdings::Int64: the maximum number of shares of each asset in each new portfolio\n\n\n\n\n\n","category":"method"},{"location":"#Brokerage.Client.createUser-Tuple{Any, Any}","page":"Home","title":"Brokerage.Client.createUser","text":"createUser(username::String, password::String) -> User\n\nCreate a new user with the given username and password.\n\nArguments\n\nusername::String: the username of the new user\npassword::String: the password of the new user\n\nReturns\n\nUser: the newly created user\n\n\n\n\n\n","category":"method"},{"location":"#Brokerage.Client.deletePortfolio-Tuple{Any}","page":"Home","title":"Brokerage.Client.deletePortfolio","text":"deletePortfolio(id::Int64)\n\nDelete the portfolio with the given ID.\n\nArguments\n\nid::Int64: the ID of the portfolio to be deleted\n\n\n\n\n\n","category":"method"},{"location":"#Brokerage.Client.getActiveBuyOrders-Tuple{Any, Any}","page":"Home","title":"Brokerage.Client.getActiveBuyOrders","text":"getActiveBuyOrders(acct_id::Int, ticker::Int) \n                            -> Vector{Tuple{Int64, Order{Int64, Float64, Int64, Int64}}}\n\nGet all open buy orders assigned to a given account for a given asset.\n\nArguments\n\nacct_id::Int: the assigned ID of the account whose open buy orders are to be queried\nticker::Int: the assigned ticker ID of the asset whose open buy orders are to be   queried\n\nReturns\n\nVector{Tuple{Int64, Order{Int64, Float64, Int64, Int64}}}: a vector of tuples, where   each tuple contains an order ID and the corresponding buy order (composed of Order   Size::Int64, Price::Float64, Order IDs::Int64, Account IDs::Int64).\n\n\n\n\n\n","category":"method"},{"location":"#Brokerage.Client.getActiveOrders-Tuple{Any, Any}","page":"Home","title":"Brokerage.Client.getActiveOrders","text":"getActiveOrders(acct_id::Int, ticker::Int) -> AVLTree{Int64, Order{Int64, Float64, Int64, Int64}}\n\nGet all open orders assigned to a given account for a given asset.\n\nArguments\n\nacct_id::Int: the assigned ID of the account whose open orders are to be queried\nticker::Int: the assigned ticker ID of the asset whose open orders are to be queried\n\nReturns\n\nAVLTree{Int64, Order{Int64, Float64, Int64, Int64}}: an AVL tree mapping order IDs to   orders. The AVLTree is an account map where the keys are order IDs and the values are   the corresponding orders (composed of Order Size::Int64, Price::Float64,   Order IDs::Int64, Account IDs::Int64).\n\n\n\n\n\n","category":"method"},{"location":"#Brokerage.Client.getActiveSellOrders-Tuple{Any, Any}","page":"Home","title":"Brokerage.Client.getActiveSellOrders","text":"getActiveSellOrders(acct_id::Int, ticker::Int) \n                            -> Vector{Tuple{Int64, Order{Int64, Float64, Int64, Int64}}}\n\nGet all open sell orders assigned to a given account for a given asset.\n\nArguments\n\nacct_id::Int: the assigned ID of the account whose open sell orders are to be queried\nticker::Int: the assigned ticker ID of the asset whose open sell orders are to be   queried\n\nReturns\n\nVector{Tuple{Int64, Order{Int64, Float64, Int64, Int64}}}: a vector of tuples, where   each tuple contains an order ID and the corresponding sell order (composed of Order   Size::Int64, Price::Float64, Order IDs::Int64, Account IDs::Int64).\n\n\n\n\n\n","category":"method"},{"location":"#Brokerage.Client.getBidAsk-Tuple{Any}","page":"Home","title":"Brokerage.Client.getBidAsk","text":"getBidAsk(ticker::Int) -> Tuple{Float64, Float64}\n\nGet the best bid and ask prices in the order book for a given asset.\n\nArguments\n\nticker::Int: the assigned ticker ID of the asset whose order book is to be queried\n\nReturns\n\nTuple{Float64, Float64}: a tuple of the best bid and ask prices in the order book,   where the first element is the best bid price and the second element is the best ask\n\n\n\n\n\n","category":"method"},{"location":"#Brokerage.Client.getBidAskOrders-Tuple{Any}","page":"Home","title":"Brokerage.Client.getBidAskOrders","text":"getBidAskOrders(ticker::Int) -> Tuple{Int32, Int32}\n\nGet the total number of orders on each side of the order book for a given asset.\n\nArguments\n\nticker::Int: the assigned ticker ID of the asset whose order book is to be queried\n\nReturns\n\nTuple{Int32, Int32}: a tuple of the total number of orders on each side of the order   book, where the first element is the total number of buy orders and the second element   is the total number of sell orders\n\n\n\n\n\n","category":"method"},{"location":"#Brokerage.Client.getBidAskVolume-Tuple{Any}","page":"Home","title":"Brokerage.Client.getBidAskVolume","text":"getBidAskVolume(ticker::Int) -> Tuple{Int64, Int64}\n\nGet the total bid and ask volume in the order book for a given asset.\n\nArguments\n\nticker::Int: the assigned ticker ID of the asset whose order book is to be queried\n\nReturns\n\nTuple{Int64, Int64}: a tuple of the total bid and ask volume in the order book, where   the first element is the total bid volume and the second element is the total ask volume\n\n\n\n\n\n","category":"method"},{"location":"#Brokerage.Client.getBookDepth-Tuple{Any}","page":"Home","title":"Brokerage.Client.getBookDepth","text":"getBookDepth(ticker::Int) -> Dict{Symbol, Dict{Symbol, Any}}\n\nGet the order book depth for a given asset.\n\nArguments\n\nticker::Int: the assigned ticker ID of the asset whose order book is to be queried\n\nReturns\n\nDict{Symbol, Dict{Symbol, Any}}: a nested dictionary of prices, volumes, and order   counts up to a depth of 5 price levels\n\n\n\n\n\n","category":"method"},{"location":"#Brokerage.Client.getCash-Tuple{Any}","page":"Home","title":"Brokerage.Client.getCash","text":"getCash(id::Int64) -> Float64\n\nGet the cash balance of the portfolio with the given ID.\n\nArguments\n\nid::Int64: the ID of the portfolio whose cash balance is to be retrieved\n\nReturns\n\nFloat64: the cash balance of the portfolio\n\n\n\n\n\n","category":"method"},{"location":"#Brokerage.Client.getHoldings-Tuple{Any}","page":"Home","title":"Brokerage.Client.getHoldings","text":"getHoldings(id::Int64) -> NamedTuple\n\nGet the holdings of the portfolio with the given ID.\n\nArguments\n\nid::Int64: the ID of the portfolio whose holdings are to be retrieved\n\nReturns\n\nNamedTuple: a named tuple mapping asset IDs to the number of shares held. E.g.,   NamedTuple(1 = 10, 2 = 12) means that the portfolio holds 10 shares of asset 1 and 12   shares of asset 2.\n\n\n\n\n\n","category":"method"},{"location":"#Brokerage.Client.getMarketSchedule-Tuple{}","page":"Home","title":"Brokerage.Client.getMarketSchedule","text":"getMarketSchedule() -> Tuple{DateTime, DateTime}\n\nGet the market open and close times.\n\nReturns\n\nTuple{DateTime, DateTime}: a tuple of the market open and close times\n\n\n\n\n\n","category":"method"},{"location":"#Brokerage.Client.getMidPrice-Tuple{Any}","page":"Home","title":"Brokerage.Client.getMidPrice","text":"getMidPrice(ticker::Int) -> Float64\n\nGet the mid price of the order book for a given asset.\n\nArguments\n\nticker::Int: the assigned ticker ID of the asset whose order book is to be queried\n\nReturns\n\nFloat64: the mid price of the order book (the average of the best bid and best ask   prices)\n\n\n\n\n\n","category":"method"},{"location":"#Brokerage.Client.getPriceSeries-Tuple{Any}","page":"Home","title":"Brokerage.Client.getPriceSeries","text":"getPriceSeries(ticker::Int) -> Vector{Float64}\n\nGet the price series for a given asset. The price series vector is maintained as a CircularBuffer, where the most recent price is at the end of the vector. The length of the vector is determined by the PRICE_BUFFER_CAPACITY constant in the OMS module.\n\nArguments\n\nticker::Int: the assigned ticker ID of the asset whose price series is to be queried\n\nReturns\n\nVector{Float64}: a vector of the price series for the given asset\n\n\n\n\n\n","category":"method"},{"location":"#Brokerage.Client.getTradeVolume-Tuple{Any}","page":"Home","title":"Brokerage.Client.getTradeVolume","text":"getTradeVolume(ticker::Int) -> Int64\n\nGet the total trading volume for a given asset.\n\nArguments\n\nticker::Int: the assigned ticker ID of the asset whose trading volume is to be queried\n\nReturns\n\nInt64: the total trading volume for the given asset\n\n\n\n\n\n","category":"method"},{"location":"#Brokerage.Client.hedgeTrade-NTuple{4, Any}","page":"Home","title":"Brokerage.Client.hedgeTrade","text":"hedgeTrade(ticker::Int, order_side::String, fill_amount::Int, acct_id::Int)\n\nHedge a trade for a given asset. This method allows a market maker to place a market order on the order book without having a corresponding cash balance or share holding.\n\nArguments\n\nticker::Int: the assigned ticker ID of the asset being traded\norder_side::String: the side of the order, either \"BUYORDER\" or \"SELLORDER\"\nfill_amount::Int: the number of shares to be traded\nacct_id::Int: the assigned ID of the account placing the order. This ID must be   registered as a market maker account (i.e., it must be a number less than or equal to   the value of the MM_COUNTER constant in the Mapper module).\n\n\n\n\n\n","category":"method"},{"location":"#Brokerage.Client.loginUser-Tuple{Any, Any}","page":"Home","title":"Brokerage.Client.loginUser","text":"loginUser(username::String, password::String) -> User\n\nLogin an existing user with the given username and password.\n\nArguments\n\nusername::String: the username of the user to be logged in\npassword::String: the password of the user to be logged in\n\nReturns\n\nUser: the logged in user\n\n\n\n\n\n","category":"method"},{"location":"#Brokerage.Client.placeCancelOrder-NTuple{5, Any}","page":"Home","title":"Brokerage.Client.placeCancelOrder","text":"placeCancelOrder(ticker::Int, order_id::Int, order_side::String, limit_price::Float64,\n                    acct_id::Int)\n\nPlace a cancel order for a given asset and given limit order.\n\nArguments\n\nticker::Int: the assigned ticker ID of the asset being traded\norder_id::Int: the assigned ID of the order to be cancelled\norder_side::String: the side of the order, either \"BUYORDER\" or \"SELLORDER\"\nlimit_price::Float64: the limit price of the order to be cancelled\nacct_id::Int: the assigned ID of the account placing the order\n\n\n\n\n\n","category":"method"},{"location":"#Brokerage.Client.placeLimitOrder-NTuple{5, Any}","page":"Home","title":"Brokerage.Client.placeLimitOrder","text":"placeLimitOrder(ticker::Int, order_side::String, limit_price::Float64, limit_size::Int,\n                    acct_id::Int)\n\nPlace a limit order for a given asset.\n\nArguments\n\nticker::Int: the assigned ticker ID of the asset being traded\norder_side::String: the side of the order, either \"BUYORDER\" or \"SELLORDER\"\nlimit_price::Float64: the price at which the order will be executed\nlimit_size::Int: the number of shares to be traded\nacct_id::Int: the assigned ID of the account placing the order\n\n\n\n\n\n","category":"method"},{"location":"#Brokerage.Client.placeMarketOrder-NTuple{4, Any}","page":"Home","title":"Brokerage.Client.placeMarketOrder","text":"placeMarketOrder(ticker::Int, order_side::String, fill_amount::Int, acct_id::Int;\n                    byfunds::Bool=false)\n\nPlace a market order for a given asset.\n\nArguments\n\nticker::Int: the assigned ticker ID of the asset being traded\norder_side::String: the side of the order, either \"BUYORDER\" or \"SELLORDER\"\nfill_amount::Int: the number of shares to be traded\nacct_id::Int: the assigned ID of the account placing the order\n\nKeywords\n\nbyfunds::Bool=false: if true, the fill_amount is interpreted as a dollar amount of   funds to be spent on the order. If false, the fill_amount is interpreted as a number   of shares to be traded.\n\n\n\n\n\n","category":"method"},{"location":"#Brokerage.Client.provideLiquidity-NTuple{5, Any}","page":"Home","title":"Brokerage.Client.provideLiquidity","text":"provideLiquidity(ticker::Int, order_side::String, limit_price::Float64, limit_size::Int,\n                    acct_id::Int; send_id::Bool=false) -> Int64 if send_id else nothing\n\nProvide liquidity to the order book for a given asset. This method allows a market maker to place a limit order on the order book without having a corresponding cash balance or share holding. Each order is assigned a unique ID, which is returned by this method if the keyword argument send_id is set to true.\n\nArguments\n\nticker::Int: the assigned ticker ID of the asset being traded\norder_side::String: the side of the order, either \"BUYORDER\" or \"SELLORDER\"\nlimit_price::Float64: the price at which the order will be executed\nlimit_size::Int: the number of shares to be traded\nacct_id::Int: the assigned ID of the account placing the order. This ID must be   registered as a market maker account (i.e., it must be a number less than or equal to   the value of the MM_COUNTER constant in the Mapper module).\n\nKeywords\n\nsend_id::Bool=false: if true, the ID of the order is returned by this method. If false,   nothing is returned.\n\nReturns\n\nInt64: the ID of the order if send_id is true\n\n\n\n\n\n","category":"method"}]
}
